name: CMake

on: [push]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: RelWithDebInfo

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow#configuring-a-build-matrix
    runs-on: windows-2022

    steps:
    - uses: actions/checkout@v2
    - name: List out workspace layout
      shell: bash
      run: ls ${{runner.workspace}}
    
    
    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: '5.15.2'
    
    - name: Setup vcpkg packages
      shell: bash
      run: |
        python3 ${{runner.workspace}}/setup-vcpkg.py
        sed 's/<edit here>/${{env.QT_ROOT_DIR}}/lib/cmake/Qt5' setup-vcpkg.json | tee setup_vcpkg.json
        python3 ${{runner.workspace}}/setup-vcpkg.py

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{runner.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_INSTALL_PREFIX=${{runner.workspace}}/deploy

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build .
    
    - name: Set Commit ID
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: |
        cd $GITHUB_WORKSPACE
        export VERSION=`git log --format="%H" -n 1 | head -c 7`
        echo "VERSION="$VERSION >> $GITHUB_ENV

    - name: Upload Artifact
      uses: actions/upload-artifact@v2
      with:
        name: chorus-kit-msvc2022-x64-${{env.VERSION}}
        path: ${{runner.workspace}}/deploy
